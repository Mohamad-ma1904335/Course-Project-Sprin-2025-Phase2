generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id
  username         String
  password         String
  role             Role
  completedCourses CompletedCourse[]
  registrations    Registration[]
  classesTaught    Class[]           @relation("InstructorClasses")
  expertise        Expertise[]
  enrollments      Enrollment[]
  accounts         Account[]
  sessions         Session[]
}

model Expertise {
  id     String @id @default(uuid())
  area   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model CompletedCourse {
  id        String @id @default(uuid())
  courseId  String
  classId   String
  grade     String
  studentId String
  student   User   @relation(fields: [studentId], references: [id])
}

model Course {
  id            String               @id
  name          String
  category      String
  status        String
  classes       Class[]
  registrations Registration[]
  prerequisites CoursePrerequisite[] @relation("CourseToPrerequisite")
  requiredFor   CoursePrerequisite[] @relation("PrerequisiteToCourse")
}

model CoursePrerequisite {
  id             String @id @default(uuid())
  courseId       String
  prerequisiteId String

  course       Course @relation("CourseToPrerequisite", fields: [courseId], references: [id])
  prerequisite Course @relation("PrerequisiteToCourse", fields: [prerequisiteId], references: [id])
}

model Class {
  classId      String @id
  courseId     String
  instructorId String
  time         String
  maxSeats     Int
  status       String

  course        Course         @relation(fields: [courseId], references: [id])
  instructor    User           @relation("InstructorClasses", fields: [instructorId], references: [id])
  registrations Registration[]
  enrollments   Enrollment[]
}

model Enrollment {
  id        String @id @default(uuid())
  studentId String
  classId   String

  student User  @relation(fields: [studentId], references: [id])
  class   Class @relation(fields: [classId], references: [classId])
}

model Registration {
  id        String @id @default(uuid())
  studentId String
  courseId  String
  classId   String
  status    String // e.g. "pending", "approved"
  student   User   @relation(fields: [studentId], references: [id])
  course    Course @relation(fields: [courseId], references: [id])
  class     Class  @relation(fields: [classId], references: [classId])
}

enum Role {
  student
  instructor
  admin
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
